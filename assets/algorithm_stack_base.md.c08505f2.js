import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b8955dba.js";const A=JSON.parse('{"title":"栈（Stack）","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/stack/base.md","filePath":"algorithm/stack/base.md"}'),p={name:"algorithm/stack/base.md"},o=l(`<h1 id="栈-stack" tabindex="-1">栈（Stack） <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈（Stack）&quot;">​</a></h1><p>栈（Stack）是一种线性数据结构，其主要特点是后进先出（LIFO，Last In First Out），也就是说，最后进入栈的元素会最先被取出。</p><h2 id="栈的基本操作" tabindex="-1">栈的基本操作 <a class="header-anchor" href="#栈的基本操作" aria-label="Permalink to &quot;栈的基本操作&quot;">​</a></h2><p>入栈（Push） 将元素放入栈顶。</p><p>出栈（Pop） 移除并返回栈顶元素。</p><p>查看栈顶（Peek/Top） 获取栈顶的元素，但不移除它。</p><p>判断栈是否为空（isEmpty） 检查栈中是否还有元素。</p><p>已推理，持续 一秒 栈（Stack）是一种线性数据结构，其主要特点是后进先出（LIFO，Last In First Out），也就是说，最后进入栈的元素会最先被取出。</p><p>栈的基本操作 入栈（Push） 将元素放入栈顶。</p><p>出栈（Pop） 移除并返回栈顶元素。</p><p>查看栈顶（Peek/Top） 获取栈顶的元素，但不移除它。</p><p>判断栈是否为空（isEmpty） 检查栈中是否还有元素。</p><h2 id="栈的特点" tabindex="-1">栈的特点 <a class="header-anchor" href="#栈的特点" aria-label="Permalink to &quot;栈的特点&quot;">​</a></h2><p>后进先出（LIFO）：最近加入的元素最先被取出。</p><p>存储结构：通常使用数组或链表来实现，数组实现比较简单而且可以随机访问，但在扩展数组时可能需要调整空间；链表实现则在动态扩展时更灵活。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>函数调用管理：编程语言的调用栈记录了函数调用的顺序，函数调用结束后从栈中弹出。</p><p>表达式求值：在计算器中常用栈来处理运算符和操作数，进行表达式的求值或中缀转后缀表达式转换。</p><p>撤销操作：在编辑器中，用户的操作可以依次入栈，实现撤销（Undo）的功能。</p><p>浏览器历史记录：浏览器的“后退”按钮就是利用栈结构来实现历史记录管理。</p><h2 id="示例代码-javascript-实现" tabindex="-1">示例代码（JavaScript 实现） <a class="header-anchor" href="#示例代码-javascript-实现" aria-label="Permalink to &quot;示例代码（JavaScript 实现）&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Stack</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 入栈操作</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">element</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 出栈操作</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">pop</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">isEmpty</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 查看栈顶元素</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">peek</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">isEmpty</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断栈是否为空</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">isEmpty</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取栈的大小</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">size</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">20</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">30</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">peek</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 输出：30</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;">// 输出：30</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">peek</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 输出：20</span></span></code></pre></div>`,22),t=[o];function e(c,r,F,y,D,i){return a(),n("div",null,t)}const E=s(p,[["render",e]]);export{A as __pageData,E as default};
