import{_ as a,o as s,c as n,V as e}from"./chunks/framework.b8955dba.js";const B=JSON.parse('{"title":"JSBridge的原理及使用","description":"","frontmatter":{},"headers":[],"relativePath":"basis/hybrid/JSBridge.md","filePath":"basis/hybrid/JSBridge.md"}'),l={name:"basis/hybrid/JSBridge.md"},p=e(`<h1 id="jsbridge的原理及使用" tabindex="-1">JSBridge的原理及使用 <a class="header-anchor" href="#jsbridge的原理及使用" aria-label="Permalink to &quot;JSBridge的原理及使用&quot;">​</a></h1><p>JSBridge 即 JavaScript Bridge，它是一种在 JavaScript 与原生代码（如 Android 的 Java 或 iOS 的 Objective - C/Swift）之间进行双向通信 的技术，常见于混合开发（Hybrid App）中。其核心目的是让 Web 页面能够调用原生功能（如相机、定位等），同时原生代码也能触发 Web 页面的逻辑更新。</p><h2 id="javascript调用native的方法" tabindex="-1">JavaScript调用Native的方法 <a class="header-anchor" href="#javascript调用native的方法" aria-label="Permalink to &quot;JavaScript调用Native的方法&quot;">​</a></h2><ul><li>注入API</li><li>拦截URL Scheme</li></ul><h3 id="注入-api-方式" tabindex="-1">注入 API 方式 <a class="header-anchor" href="#注入-api-方式" aria-label="Permalink to &quot;注入 API 方式&quot;">​</a></h3><p>原理：原生端向 WebView 中注入一个全局的 JavaScript 对象，Web 端可以直接调用这个对象的方法，从而触发原生代码的执行。</p><p>示例： 在 Android 端注入对象：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">webView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addJavascriptInterface</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">JsInterface</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NativeBridge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">JsInterface</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">JavascriptInterface</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">public</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">void</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">nativeMethod</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 执行原生逻辑</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 Web 端调用注入的对象方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Web 端代码</span></span>
<span class="line"><span style="color:#BABED8;">NativeBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nativeMethod</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test param</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="native调用javascript" tabindex="-1">Native调用JavaScript <a class="header-anchor" href="#native调用javascript" aria-label="Permalink to &quot;Native调用JavaScript&quot;">​</a></h2><p>原理：原生端通过 WebView 提供的方法来执行 JavaScript 代码。在 Android 中，可以使用 webView.loadUrl(&quot;javascript:yourJavaScriptFunction()&quot;);；在 iOS 中，可以使用 [webView <code>evaluateJavaScript</code>😡&quot;yourJavaScriptFunction()&quot; completionHandler:nil];。</p><p>示例： 在 Android 端调用 Web 端的 JavaScript 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">webView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadUrl</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">javascript:webFunction(&#39;Hello from native&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>在 Web 端定义相应的 JavaScript 方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">webFunction</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">message</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://blog.csdn.net/wang_gwei/article/details/132338914" target="_blank" rel="noreferrer">JSBridge的原理及使用</a></p>`,18),o=[p];function t(r,c,i,y,d,D){return s(),n("div",null,o)}const v=a(l,[["render",t]]);export{B as __pageData,v as default};
