import{_ as s,o as a,c as n,V as o}from"./chunks/framework.b8955dba.js";const B=JSON.parse('{"title":"window.isNaN与Number.isNaN","description":"","frontmatter":{},"headers":[],"relativePath":"basis/other/isNaN.md","filePath":"basis/other/isNaN.md"}'),l={name:"basis/other/isNaN.md"},e=o(`<h1 id="window-isnan与number-isnan" tabindex="-1">window.isNaN与Number.isNaN <a class="header-anchor" href="#window-isnan与number-isnan" aria-label="Permalink to &quot;window.isNaN与Number.isNaN&quot;">​</a></h1><p>window.isNaN 和 Number.isNaN 都用于判断一个值是否为 NaN，但它们之间存在类型判断严格程度的区别</p><ul><li>window.isNaN：这是一个全局函数，它在判断时会先尝试将传入的值转换为数字，再进行 NaN 判断。这意味着即使传入的值不是数字类型，它也会尽力转换后判断。例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true，因为 &#39;abc&#39; 转换为数字是 NaN</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// false，因为 &#39;123&#39; 能转换为数字 123</span></span></code></pre></div><ul><li>Number.isNaN：这是 Number 对象上的静态方法，它只会对真正的数字类型进行 NaN 判断。如果传入的值不是数字类型，会直接返回 false。例如：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// false，因为 &#39;abc&#39; 不是数字类型</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Number</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isNaN</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div>`,6),p=[e];function t(c,r,i,D,y,N){return a(),n("div",null,p)}const A=s(l,[["render",t]]);export{B as __pageData,A as default};
