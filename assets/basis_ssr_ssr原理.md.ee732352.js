import{_ as a,o as e,c as r,V as i}from"./chunks/framework.b8955dba.js";const _=JSON.parse('{"title":"ssr服务端渲染原理","description":"","frontmatter":{},"headers":[],"relativePath":"basis/ssr/ssr原理.md","filePath":"basis/ssr/ssr原理.md"}'),l={name:"basis/ssr/ssr原理.md"},t=i('<h1 id="ssr服务端渲染原理" tabindex="-1">ssr服务端渲染原理 <a class="header-anchor" href="#ssr服务端渲染原理" aria-label="Permalink to &quot;ssr服务端渲染原理&quot;">​</a></h1><p>服务端渲染（SSR，Server - Side Rendering）的核心原理是在服务器端生成完整的 HTML 页面，然后将其发送到客户端，而不是像传统的客户端渲染那样，先发送一个空的 HTML 框架，再依靠客户端 JavaScript 来填充内容。以下从几个关键方面详细介绍 SSR 的原理：</p><ol><li>服务器端渲染页面</li></ol><ul><li>请求处理：当用户访问一个页面时，服务器会接收到这个请求。</li><li>数据获取：服务器会根据请求的 URL 和参数等信息，从数据库或其他数据源中获取需要渲染的数据。</li><li>页面渲染：服务器会使用模板引擎（如 EJS、Pug 等）将获取到的数据和静态资源等渲染为完整的 HTML 页面。</li><li>页面发送：服务器将渲染好的HTML页面作为响应返回给客户端。</li></ul><ol start="2"><li>客户端接管页面 <ul><li>激活交互：虽然用户已经看到了页面内容，但此时页面可能还缺少一些交互功能，如按钮点击事件、动态更新等。客户端 JavaScript 代码会在页面加载完成后启动，它会重新绑定事件监听器，使页面具备完整的交互功能。例如，为页面上的 “点赞” 按钮添加点击事件，点击后可以通过 AJAX 请求将点赞数据发送到服务器。</li><li>Hydration（注水）：这是 SSR 中的一个重要概念，指的是客户端 JavaScript 代码将静态的 HTML 页面 “激活” 为一个动态的、交互式的应用程序的过程。在这个过程中，客户端代码会重新创建与服务器端渲染时相同的 React/Vue 等框架的虚拟 DOM 树，并将其与已有的 HTML 结构进行匹配和 “融合”。如果在服务器端渲染时某个组件的状态已经被设置好了，客户端代码会保留这些状态，然后在此基础上添加交互功能。</li></ul></li></ol><h2 id="服务端渲染的主要优点包括" tabindex="-1">服务端渲染的主要优点包括： <a class="header-anchor" href="#服务端渲染的主要优点包括" aria-label="Permalink to &quot;服务端渲染的主要优点包括：&quot;">​</a></h2><ol><li><strong>更好的SEO</strong>：由于搜索引擎爬虫可以直接抓取到完整的HTML页面，因此服务端渲染可以更好地支持搜索引擎优化（SEO）。这对于需要搜索引擎排名的网站来说非常重要。</li><li><strong>更快的首屏加载速度</strong>：由于HTML页面在服务器端生成，因此客户端只需要加载和显示页面，而不需要等待JavaScript代码的执行，从而可以更快地加载页面。</li><li><strong>更好的用户体验</strong>：由于页面在服务器端生成，因此用户可以更快地看到页面内容，从而可以提供更好的用户体验。</li></ol><h2 id="服务端渲染的实现方式" tabindex="-1">服务端渲染的实现方式 <a class="header-anchor" href="#服务端渲染的实现方式" aria-label="Permalink to &quot;服务端渲染的实现方式&quot;">​</a></h2><p>服务端渲染的实现方式主要有以下几种：</p><ol><li><strong>后端模板渲染</strong>：后端模板渲染是指在服务器端使用模板引擎（如EJS、Pug等）将后端数据渲染为HTML页面，然后将生成的HTML页面发送给客户端。这种方式需要后端开发人员编写模板代码，并且需要后端服务器支持模板引擎。</li><li><strong>同构应用（Isomorphic Application）</strong>：同构应用是指同时支持客户端和服务器端的应用程序。在服务端，应用程序使用Node.js等JavaScript运行时环境执行代码，并将生成的HTML页面发送给客户端；在客户端，应用程序使用浏览器中的JavaScript引擎执行相同的代码，从而实现客户端渲染。这种方式需要应用程序的开发人员编写通用的代码，并且需要后端服务器支持Node.js等JavaScript运行时环境。</li></ol><h2 id="虚拟-dom-在-ssr-中的角色" tabindex="-1">虚拟 DOM 在 SSR 中的角色 <a class="header-anchor" href="#虚拟-dom-在-ssr-中的角色" aria-label="Permalink to &quot;虚拟 DOM 在 SSR 中的角色&quot;">​</a></h2><p>在服务端渲染（SSR）中，并非所有框架服务端都会生成虚拟 DOM，但像 React、Vue 这类流行框架在 SSR 过程中，服务端确实会生成类似虚拟 DOM 的结构 。</p><ol><li><p>以 React 为例：</p><ul><li>服务端虚拟 DOM 生成：在 React 的 SSR 中，服务端会根据组件结构和数据，构建虚拟 DOM 树。React 通过 renderToString（针对字符串渲染）或 renderToStaticMarkup（生成不含额外 React 属性的静态标记）等方法，将 React 组件在服务端渲染为 HTML 字符串。在这个过程里，服务端会像在客户端一样构建虚拟 DOM 来计算最终的 HTML 输出。这样做有助于高效地计算出需要渲染到 HTML 中的内容，并且可以复用组件的逻辑和状态管理机制。</li><li>客户端与服务端虚拟 DOM 的关联：客户端接收到服务端传来的 HTML 后，会重新构建虚拟 DOM。客户端构建的虚拟 DOM 需要与服务端渲染时生成的虚拟 DOM “对齐”，这个过程就是 “注水（Hydration）”。通过比对两端的虚拟 DOM，客户端可以快速确定哪些部分需要添加交互性，哪些状态已经由服务端渲染确定，从而高效地激活页面成为一个动态的 React 应用。</li></ul></li><li><p>Vue 在 SSR 时也有类似机制：</p><ul><li>Vue 服务端渲染过程：Vue 使用 vue - server - renderer 进行服务端渲染。在服务端，Vue 会基于组件和数据生成虚拟 DOM 结构，然后将其渲染为 HTML 字符串发送给客户端。</li><li>客户端激活：客户端接收到 HTML 后，通过挂载 Vue 应用，重新构建虚拟 DOM，并与服务端渲染的结果进行匹配。Vue 会保留服务端渲染时的状态，仅对需要交互的部分进行额外的绑定和处理，完成 “注水”，使整个应用具备完整的交互能力。</li></ul></li></ol>',13),s=[t];function o(n,c,S,d,u,M){return e(),r("div",null,s)}const h=a(l,[["render",o]]);export{_ as __pageData,h as default};
