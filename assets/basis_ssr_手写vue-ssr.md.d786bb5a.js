import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b8955dba.js";const A=JSON.parse('{"title":"手写vue-ssr","description":"","frontmatter":{},"headers":[],"relativePath":"basis/ssr/手写vue-ssr.md","filePath":"basis/ssr/手写vue-ssr.md"}'),p={name:"basis/ssr/手写vue-ssr.md"},o=l(`<h1 id="手写vue-ssr" tabindex="-1">手写vue-ssr <a class="header-anchor" href="#手写vue-ssr" aria-label="Permalink to &quot;手写vue-ssr&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>vue-ssr是vue官方提供的用于服务端渲染的解决方案，它能够将vue组件渲染成html字符串，然后将这些字符串发送到浏览器，浏览器再进行渲染，从而提升首屏加载速度。但是，vue-ssr的实现比较复杂，需要了解很多vue的内部原理，因此，本文将手写一个简单的vue-ssr，帮助大家更好地理解vue-ssr的实现原理。</p><h2 id="_2-实现思路" tabindex="-1">2. 实现思路 <a class="header-anchor" href="#_2-实现思路" aria-label="Permalink to &quot;2. 实现思路&quot;">​</a></h2><p>手写vue-ssr需要实现以下几个步骤：</p><ol><li>创建一个vue实例，并将组件渲染成html字符串。</li><li>将html字符串发送到浏览器。</li><li>在浏览器端，将html字符串和vue实例挂载到页面上，从而实现客户端渲染。</li></ol><h2 id="_3-实现步骤" tabindex="-1">3. 实现步骤 <a class="header-anchor" href="#_3-实现步骤" aria-label="Permalink to &quot;3. 实现步骤&quot;">​</a></h2><h3 id="_3-1-创建vue实例-并将组件渲染成html字符串" tabindex="-1">3.1 创建vue实例，并将组件渲染成html字符串 <a class="header-anchor" href="#_3-1-创建vue实例-并将组件渲染成html字符串" aria-label="Permalink to &quot;3.1 创建vue实例，并将组件渲染成html字符串&quot;">​</a></h3><p>首先，我们需要创建一个vue实例，并将组件渲染成html字符串。我们可以使用vue的render函数来实现这个功能。render函数接受一个组件作为参数，返回一个html字符串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./App.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">h</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">h</span><span style="color:#BABED8;">(App)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> html </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$el</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">outerHTML</span></span></code></pre></div><h3 id="_3-2-将html字符串发送到浏览器" tabindex="-1">3.2 将html字符串发送到浏览器 <a class="header-anchor" href="#_3-2-将html字符串发送到浏览器" aria-label="Permalink to &quot;3.2 将html字符串发送到浏览器&quot;">​</a></h3><p>接下来，我们需要将html字符串发送到浏览器。我们可以使用Node.js的http模块来实现这个功能。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server is running on port 3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="_3-3-在浏览器端-将html字符串和vue实例挂载到页面上" tabindex="-1">3.3 在浏览器端，将html字符串和vue实例挂载到页面上 <a class="header-anchor" href="#_3-3-在浏览器端-将html字符串和vue实例挂载到页面上" aria-label="Permalink to &quot;3.3 在浏览器端，将html字符串和vue实例挂载到页面上&quot;">​</a></h3><p>最后，我们需要在浏览器端，将html字符串和vue实例挂载到页面上，从而实现客户端渲染。我们可以使用vue的mount函数来实现这个功能。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./App.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">h</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">h</span><span style="color:#BABED8;">(App)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><h2 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h2><p>通过以上步骤，我们实现了一个简单的vue-ssr。虽然这个实现比较简单，但是它可以帮助我们更好地理解vue-ssr的实现原理。在实际应用中，vue-ssr的实现会更加复杂，需要处理更多的细节和问题。但是，通过这个简单的实现，我们可以更好地理解vue-ssr的工作原理，从而更好地使用vue-ssr。</p>`,18),e=[o];function t(r,c,D,y,F,i){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{A as __pageData,h as default};
