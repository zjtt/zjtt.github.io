import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.M0jMQRpf.js";const g=JSON.parse('{"title":"浏览器安全","description":"","frontmatter":{},"headers":[],"relativePath":"browser/security.md","filePath":"browser/security.md"}'),e={name:"browser/security.md"},l=t(`<h1 id="浏览器安全" tabindex="-1">浏览器安全 <a class="header-anchor" href="#浏览器安全" aria-label="Permalink to &quot;浏览器安全&quot;">​</a></h1><h2 id="_1、xss-cross-site-scripting-攻击-跨站脚本攻击" tabindex="-1">1、xss(cross site scripting)攻击,跨站脚本攻击 <a class="header-anchor" href="#_1、xss-cross-site-scripting-攻击-跨站脚本攻击" aria-label="Permalink to &quot;1、xss(cross site scripting)攻击,跨站脚本攻击&quot;">​</a></h2><h3 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h3><ul><li>存储型攻击</li><li>反射型攻击</li><li>基于dom的攻击(Dom-base)</li></ul><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><ul><li>服务器对代码进行过滤和转码</li><li>合理利用CSP(响应头中增加content-security-policy字段)</li><li>服务端给cookie增加http-only</li></ul><h2 id="_2、csrf-cross-site-request-forgery-攻击-跨站请求攻击" tabindex="-1">2、csrf(Cross-Site Request Forgery)攻击,跨站请求攻击 <a class="header-anchor" href="#_2、csrf-cross-site-request-forgery-攻击-跨站请求攻击" aria-label="Permalink to &quot;2、csrf(Cross-Site Request Forgery)攻击,跨站请求攻击&quot;">​</a></h2><h4 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h4><p>跨站请求攻击，特点是b网站利用form表单没有跨域限制请求a网站的接口，导致a网站的用户有损失的一种攻击</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myform&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000/importapi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;money&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.myform.submit()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="解决方案-1" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案-1" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><ul><li>添加验证码(体验不好)<br> express + svg-captcha生成svg图片验证码 小知识：静态图片验证码ORC识别成功率90%，动态图片验证码ORC识别成功率40%，所以最好使用手机短信验证码，发送短信验证码前让输入图片验证码</li><li>判断来源referer：不靠谱，可以通过node自己发请求来实现伪造header里的referer</li><li>token</li></ul><h2 id="_3、xsrf攻击" tabindex="-1">3、xsrf攻击 <a class="header-anchor" href="#_3、xsrf攻击" aria-label="Permalink to &quot;3、xsrf攻击&quot;">​</a></h2><p>xss + csrf = XSRF蠕虫攻击</p><p>例如往a网站注入一个脚本，然后脚本内会自动发送发表评论的请求，如果是存储型xss，其他用户只要刷新一下页面就会多一条评论</p>`,15),n=[l];function r(h,p,k,o,c,d){return a(),i("div",null,n)}const u=s(e,[["render",r]]);export{g as __pageData,u as default};
