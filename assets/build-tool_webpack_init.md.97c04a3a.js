import{_ as e,o as a,c as t,V as i}from"./chunks/framework.b8955dba.js";const h=JSON.parse('{"title":"webpack初始化流程","description":"","frontmatter":{},"headers":[],"relativePath":"build-tool/webpack/init.md","filePath":"build-tool/webpack/init.md"}'),l={name:"build-tool/webpack/init.md"},o=i('<h1 id="webpack初始化流程" tabindex="-1">webpack初始化流程 <a class="header-anchor" href="#webpack初始化流程" aria-label="Permalink to &quot;webpack初始化流程&quot;">​</a></h1><p>Webpack 的初始化流程。</p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。</li><li>确定入口：根据配置中的 entry 找出所有的入口文件。</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li><li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol><p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>',4),c=[o];function n(r,p,_,s,d,b){return a(),t("div",null,c)}const u=e(l,[["render",n]]);export{h as __pageData,u as default};
