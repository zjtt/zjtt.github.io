import{_ as s,o as a,c as e,V as t}from"./chunks/framework.b8955dba.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"react/redux.md","filePath":"react/redux.md"}'),n={name:"react/redux.md"},o=t(`<p>redux + react-redux + redux-thunk/redux-saga = vuex</p><p><a href="https://segmentfault.com/a/1190000039789825?utm_source=sf-similar-article" target="_blank" rel="noreferrer">一文总结redux、react-redux、redux-saga</a></p><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h3><p>存数据的地方，是一个容器。整个应用只能有一个store</p><p>将state、action、reducer联系在一起的对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">createStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redux</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">.const store = createStore(fn)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>(1)getState:得到state</p><p>(2)dispatch(action);分发action，触发reducer调用，产生新的state</p><p>(3)subscribe(listener):注册监听，当 产生了新的state时，自动调用</p><h3 id="reducer" tabindex="-1">reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;reducer&quot;">​</a></h3><p>用于初始化状态、加工状态，生成新的state给出去</p><p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> reducer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">state.action</span><span style="color:#89DDFF;">){....</span><span style="color:#BABED8;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">state</span><span style="color:#F07178;">:</span></span>
<span class="line"><span style="color:#BABED8;">action</span></span></code></pre></div><p>Action 就是 View 发出的通知，表示 State 应该要发生变化了。</p><p>Action 描述当前发生的事情。改变 State 的唯-办法，就是使用 Action</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> action </span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ADD TODO’payload: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">Learn Redux’</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Reducer 函教最重要的特征是，它是包含两个属性type(标识居性)、data(数据是个纯函教，也就是说，只要是同样的输入，必定得到同样的输出</p><h3 id="手写一个redux" tabindex="-1">手写一个redux <a class="header-anchor" href="#手写一个redux" aria-label="Permalink to &quot;手写一个redux&quot;">​</a></h3>`,18),p=[o];function l(r,c,i,d,D,u){return a(),e("div",null,p)}const h=s(n,[["render",l]]);export{F as __pageData,h as default};
