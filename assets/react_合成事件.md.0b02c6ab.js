import{_ as a,o as e,c as t,V as r}from"./chunks/framework.b8955dba.js";const f=JSON.parse('{"title":"合成事件","description":"","frontmatter":{},"headers":[],"relativePath":"react/合成事件.md","filePath":"react/合成事件.md"}'),c={name:"react/合成事件.md"},o=r('<h1 id="合成事件" tabindex="-1">合成事件 <a class="header-anchor" href="#合成事件" aria-label="Permalink to &quot;合成事件&quot;">​</a></h1><h2 id="合成事件系统" tabindex="-1">合成事件系统 <a class="header-anchor" href="#合成事件系统" aria-label="Permalink to &quot;合成事件系统&quot;">​</a></h2><p>原理：React 并没有直接使用原生的 DOM 事件，而是自己实现了一套合成事件系统。合成事件是对原生事件的封装，它在不同的浏览器中提供了一致的 API，屏蔽了浏览器之间的差异。</p><h2 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h2><p>机制：React 采用事件委托的方式来处理事件。所有的合成事件都不会直接绑定到具体的 DOM 元素上，而是统一绑定到<code>文档根节点（React 16）或 React 渲染的根节点（React 17）</code>上。当事件触发时，会通过事件冒泡机制将事件传递到根节点，然后 React 再根据事件的目标元素来分发事件</p>',5),_=[o];function n(s,i,d,h,l,p){return e(),t("div",null,_)}const u=a(c,[["render",n]]);export{f as __pageData,u as default};
