import{_ as e,o as t,c as a,V as i}from"./chunks/framework.b8955dba.js";const p=JSON.parse('{"title":"Vue 中使用了哪些设计模式?","description":"","frontmatter":{},"headers":[],"relativePath":"vue/other/design-mode.md","filePath":"vue/other/design-mode.md"}'),o={name:"vue/other/design-mode.md"},s=i('<h1 id="vue-中使用了哪些设计模式" tabindex="-1">Vue 中使用了哪些设计模式? <a class="header-anchor" href="#vue-中使用了哪些设计模式" aria-label="Permalink to &quot;Vue 中使用了哪些设计模式?&quot;">​</a></h1><ul><li>单例模式-单例模式就是整个程序有且仅有一个实例 vuex 中的store</li><li>工厂模式-传入参数即可创建实例(createElement)</li><li>发布订阅模式-订阅者把自己想订阅的事件注册到调度中心，当该事件触发时候，发布者发布该事件到调度中心，由调度中心统一调度订阅者注册到调度中心的处理代码,例如事件总线eventBus</li><li>观察者模式-watcher&amp;dep的关系</li><li>代理模式-代理模式给某一个对象提供一个代理对象,并由代理对象控制对原对象的引用, 例如组件中的this.xxx实际访问的是this._data.xxx</li><li>中介者模式-中介者是一个行为设计模式通过提供一个统一的接口让系统的不同部分进行通信,vuex。</li><li>策略模式-策略模式指对象有某个行为,但是在不同的场景中,该行为有不同的实现方案，例如mergeOptions(methods, props, computed, watch, data)。</li><li>外观模式-提供了统一的接口，用来访问子系统中的一群接口</li></ul>',2),l=[s];function r(d,n,_,c,u,h){return t(),a("div",null,l)}const x=e(o,[["render",r]]);export{p as __pageData,x as default};
